<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 UI 결정 프로세스 시뮬레이터</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Calm Neutrals -->
    <!-- Application Structure Plan: 이 애플리케이션은 사용자가 URL 입력을 통해 '세션 컨텍스트 유지' 프로세스를 시각적으로 체험할 수 있는 단일 페이지 시뮬레이터로 설계되었습니다. 상단에는 인터랙티브 시뮬레이션 영역을 배치하여 사용자의 직접적인 참여를 유도하고, 하단에는 원본 기획안의 개발 요구사항을 카드 형태로 명확하게 제시합니다. 이 구조는 복잡한 기술 흐름을 먼저 직관적으로 경험하게 한 후, 세부적인 기술 명세를 확인하도록 하여 사용자 이해도를 극대화하기 위해 선택되었습니다. -->
    <!-- Visualization & Content Choices: '개발 요구사항' 테이블 정보를 정적인 텍스트가 아닌, 사용자의 입력에 따라 단계별로 활성화되는 동적 다이어그램으로 시각화했습니다. HTML div와 Tailwind CSS를 사용해 프론트엔드, 백엔드, 세션 저장소, UI 컴포넌트를 표현하고, JavaScript로 데이터 흐름을 애니메이션으로 구현합니다. 사용자가 '시뮬레이션 시작' 버튼을 클릭하면, URL 파싱부터 API 호출, 세션 저장, 최종 UI 변경까지의 과정이 순차적으로 시각화되어, 기술적 배경이 없는 사용자도 프로세스의 본질을 쉽게 이해할 수 있도록 설계했습니다. 이는 정적 정보 전달을 넘어 능동적인 학습 경험을 제공하기 위함입니다. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Noto Sans KR', 'Inter', sans-serif;
        }
        .flow-line {
            position: absolute;
            background-color: #9ca3af;
            transition: all 0.5s ease-in-out;
        }
        .flow-line.vertical {
            width: 2px;
        }
        .flow-line.horizontal {
            height: 2px;
        }
        .flow-dot {
            position: absolute;
            width: 12px;
            height: 12px;
            background-color: #f59e0b;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: all 0.8s ease-in-out;
        }
        .flow-dot.active {
            opacity: 1;
        }
        .step-card {
            transition: all 0.3s ease-in-out;
            border-color: #e5e7eb;
        }
        .step-card.active {
            border-color: #3b82f6;
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
    </style>
</head>
<body class="bg-slate-50 text-slate-800">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        <header class="text-center mb-10">
            <h1 class="text-3xl md:text-4xl font-bold text-slate-900">유통사 매칭 및 동적 UI 결정 프로세스</h1>
            <p class="mt-2 text-lg text-slate-600">전용 도메인 유입 시 세션 컨텍스트 유지 흐름 시뮬레이터</p>
        </header>

        <main>
            <!-- Interactive Simulation Section -->
            <section class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                <h2 class="text-2xl font-bold mb-4 text-slate-900">인터랙티브 시뮬레이션</h2>
                <div class="flex items-center gap-4 mb-6">
                    <div class="relative flex-grow">
                         <span class="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400">https://</span>
                        <input id="urlInput" type="text" class="w-full pl-16 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="distA.orderz.kr" value="distA.orderz.kr">
                    </div>
                    <button id="simulateBtn" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition-colors">시뮬레이션 시작</button>
                    <button id="resetBtn" class="bg-slate-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-slate-600 transition-colors">초기화</button>
                </div>
                <p id="statusText" class="text-center text-slate-600 h-6 mb-4 transition-opacity duration-300">시작 버튼을 눌러 프로세스를 확인하세요.</p>

                <div class="relative grid grid-cols-1 md:grid-cols-3 gap-8 items-start min-h-[400px]">
                    <!-- Frontend -->
                    <div id="frontend" class="step-card bg-slate-50 p-4 rounded-lg border-2 text-center h-full flex flex-col justify-center">
                        <h3 class="font-bold text-lg text-slate-700">FRONTEND (Client)</h3>
                        <p class="text-sm text-slate-500 mt-1">사용자 브라우저</p>
                    </div>

                    <!-- Backend -->
                    <div id="backend" class="step-card bg-slate-50 p-4 rounded-lg border-2 text-center h-full flex flex-col justify-center">
                        <h3 class="font-bold text-lg text-slate-700">BACKEND (Server)</h3>
                        <p class="text-sm text-slate-500 mt-1">플랫폼 서버</p>
                    </div>
                    
                    <!-- Result UI / Session -->
                    <div class="flex flex-col gap-8 h-full">
                       <div id="session" class="step-card bg-slate-50 p-4 rounded-lg border-2 text-center flex-1">
                           <h3 class="font-bold text-lg text-slate-700">Session Storage</h3>
                           <div id="sessionContent" class="mt-2 bg-white p-2 rounded h-16 flex items-center justify-center text-slate-400 font-mono text-sm transition-colors duration-500">context_dist_id: null</div>
                       </div>
                       <div id="ui" class="step-card bg-white p-4 rounded-lg border-2 text-center flex-1 flex flex-col justify-center transition-all duration-500">
                           <h3 class="font-bold text-lg text-slate-700 mb-2">Dynamic UI</h3>
                           <div id="uiContent" class="w-full h-24 rounded-lg flex items-center justify-center transition-all duration-500 border-2 border-dashed border-slate-300">
                               <div id="uiLogo" class="text-4xl font-bold text-slate-300 transition-colors duration-500">?</div>
                           </div>
                       </div>
                    </div>

                    <!-- Flow Animation -->
                    <div id="flow-container" class="absolute top-0 left-0 w-full h-full pointer-events-none">
                        <div id="dot1" class="flow-dot" style="top: 50%; left: 16.66%;"></div>
                        <div id="dot2" class="flow-dot" style="top: 50%; left: 50%;"></div>
                        <div id="dot3" class="flow-dot" style="top: 25%; left: 50%;"></div>
                        <div id="dot4" class="flow-dot" style="top: 25%; left: 83.33%;"></div>
                        <div id="dot5" class="flow-dot" style="top: 75%; left: 83.33%;"></div>
                    </div>
                </div>
            </section>
            
            <!-- Requirements Breakdown Section -->
            <section class="mt-12">
                <h2 class="text-2xl font-bold mb-6 text-center text-slate-900">세션 컨텍스트 유지 개발 요구사항</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                    <div id="req-FE-CTX-01" class="req-card bg-white p-4 rounded-lg shadow border-l-4 border-amber-400">
                        <p class="font-bold text-sm text-amber-800">FE-CTX-01</p>
                        <h4 class="font-semibold mt-1">초기 유입 (URL 파싱)</h4>
                        <p class="text-sm text-slate-600 mt-1">접속 URL에서 서브도메인을 추출하고 API를 호출하여 유통사 ID를 확보합니다.</p>
                    </div>
                    <div id="req-BE-CTX-01" class="req-card bg-white p-4 rounded-lg shadow border-l-4 border-sky-400">
                        <p class="font-bold text-sm text-sky-800">BE-CTX-01</p>
                        <h4 class="font-semibold mt-1">컨텍스트 조회 API</h4>
                        <p class="text-sm text-slate-600 mt-1">서브도메인으로 유통사의 브랜딩 정보를 반환하는 API를 구현합니다.</p>
                    </div>
                    <div id="req-FE-CTX-02" class="req-card bg-white p-4 rounded-lg shadow border-l-4 border-emerald-400">
                        <p class="font-bold text-sm text-emerald-800">FE-CTX-02</p>
                        <h4 class="font-semibold mt-1">세션 저장</h4>
                        <p class="text-sm text-slate-600 mt-1">조회된 유통사 ID를 Session Storage에 저장하여 유지합니다.</p>
                    </div>
                    <div id="req-FE-CTX-03" class="req-card bg-white p-4 rounded-lg shadow border-l-4 border-indigo-400">
                        <p class="font-bold text-sm text-indigo-800">FE-CTX-03</p>
                        <h4 class="font-semibold mt-1">UI 동적 적용</h4>
                        <p class="text-sm text-slate-600 mt-1">저장된 ID를 기반으로 로고, 색상 등 UI를 동적으로 변경합니다.</p>
                    </div>
                    <div id="req-FE-BE-CTX-04" class="req-card bg-white p-4 rounded-lg shadow border-l-4 border-rose-400">
                        <p class="font-bold text-sm text-rose-800">FE/BE-CTX-04</p>
                        <h4 class="font-semibold mt-1">상품 필터링</h4>
                        <p class="text-sm text-slate-600 mt-1">상품 목록 조회 시 저장된 ID를 필터 값으로 사용합니다.</p>
                    </div>
                </div>
            </section>
        </main>
        
        <footer class="text-center mt-12 py-6 border-t border-slate-200">
            <p class="text-sm text-slate-500">Orderz Platform Dynamic UI Process Simulator</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const simulateBtn = document.getElementById('simulateBtn');
            const resetBtn = document.getElementById('resetBtn');
            const urlInput = document.getElementById('urlInput');
            const statusText = document.getElementById('statusText');

            const frontendEl = document.getElementById('frontend');
            const backendEl = document.getElementById('backend');
            const sessionEl = document.getElementById('session');
            const uiEl = document.getElementById('ui');
            
            const sessionContent = document.getElementById('sessionContent');
            const uiContent = document.getElementById('uiContent');
            const uiLogo = document.getElementById('uiLogo');

            const reqCards = document.querySelectorAll('.req-card');
            const dots = document.querySelectorAll('.flow-dot');

            let isSimulating = false;

            const mockDistributors = {
                'dista': { id: 'd-001', name: '유통사 A', logo: 'A', color: 'bg-blue-100', textColor: 'text-blue-600', borderColor: 'border-blue-500' },
                'distb': { id: 'd-002', name: '유통사 B', logo: 'B', color: 'bg-emerald-100', textColor: 'text-emerald-600', borderColor: 'border-emerald-500' },
                'distc': { id: 'd-003', name: '유통사 C', logo: 'C', color: 'bg-amber-100', textColor: 'text-amber-600', borderColor: 'border-amber-500' },
            };

            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            function resetSimulation() {
                isSimulating = false;
                
                statusText.textContent = '시작 버튼을 눌러 프로세스를 확인하세요.';
                
                [frontendEl, backendEl, sessionEl, uiEl].forEach(el => el.classList.remove('active'));
                reqCards.forEach(card => card.classList.remove('opacity-50'));
                dots.forEach(dot => dot.classList.remove('active'));

                sessionContent.textContent = 'context_dist_id: null';
                sessionContent.classList.remove(...Object.values(mockDistributors).map(d => d.textColor));
                sessionContent.classList.add('text-slate-400');
                
                uiContent.className = 'w-full h-24 rounded-lg flex items-center justify-center transition-all duration-500 border-2 border-dashed border-slate-300';
                uiLogo.textContent = '?';
                uiLogo.className = 'text-4xl font-bold text-slate-300 transition-colors duration-500';
                
                simulateBtn.disabled = false;
                urlInput.disabled = false;
            }

            async function startSimulation() {
                if (isSimulating) return;
                isSimulating = true;
                resetSimulation();
                simulateBtn.disabled = true;
                urlInput.disabled = true;

                const url = urlInput.value.toLowerCase();
                const subdomain = url.split('.')[0];
                const distributor = mockDistributors[subdomain];

                if (!distributor) {
                    statusText.textContent = `오류: '${subdomain}'에 해당하는 유통사 정보가 없습니다. (예: distA.orderz.kr)`;
                    isSimulating = false;
                    simulateBtn.disabled = false;
                    urlInput.disabled = false;
                    return;
                }

                reqCards.forEach(card => card.classList.add('opacity-50'));

                // Step 1: URL Parsing (FE-CTX-01)
                statusText.textContent = '1. 프론트엔드: 접속 URL에서 서브도메인 추출 중...';
                frontendEl.classList.add('active');
                document.getElementById('req-FE-CTX-01').classList.remove('opacity-50');
                await sleep(1500);

                // Step 2: API Call to Backend
                statusText.textContent = '2. 프론트엔드 -> 백엔드: 유통사 정보 요청 (API 호출)';
                document.getElementById('dot1').classList.add('active');
                await sleep(800);
                document.getElementById('dot1').style.left = '50%';
                await sleep(800);
                document.getElementById('dot1').classList.remove('active');
                document.getElementById('dot1').style.left = '16.66%';

                // Step 3: Backend Processing (BE-CTX-01)
                statusText.textContent = '3. 백엔드: 서브도메인 기반으로 유통사 정보 조회';
                backendEl.classList.add('active');
                document.getElementById('req-BE-CTX-01').classList.remove('opacity-50');
                await sleep(1500);

                // Step 4: API Response to Frontend
                statusText.textContent = '4. 백엔드 -> 프론트엔드: 브랜딩 정보 응답';
                document.getElementById('dot2').classList.add('active');
                await sleep(800);
                document.getElementById('dot2').style.left = '16.66%';
                await sleep(800);
                backendEl.classList.remove('active');
                document.getElementById('dot2').classList.remove('active');
                document.getElementById('dot2').style.left = '50%';
                await sleep(500);

                // Step 5: Session Storage (FE-CTX-02)
                statusText.textContent = `5. 프론트엔드: 세션 저장소에 유통사 ID '${distributor.id}' 저장`;
                document.getElementById('req-FE-CTX-02').classList.remove('opacity-50');
                sessionEl.classList.add('active');
                sessionContent.textContent = `context_dist_id: '${distributor.id}'`;
                sessionContent.classList.remove('text-slate-400');
                sessionContent.classList.add(distributor.textColor);
                await sleep(1500);
                
                // Step 6: Dynamic UI Update (FE-CTX-03)
                statusText.textContent = '6. 프론트엔드: 저장된 ID 기반으로 UI 동적 변경 적용';
                document.getElementById('req-FE-CTX-03').classList.remove('opacity-50');
                uiEl.classList.add('active');
                uiContent.classList.remove('border-dashed', 'border-slate-300');
                uiContent.classList.add(distributor.color, distributor.borderColor);
                uiLogo.textContent = distributor.logo;
                uiLogo.classList.remove('text-slate-300');
                uiLogo.classList.add(distributor.textColor);
                await sleep(1500);

                // Final Step
                statusText.textContent = `완료: '${distributor.name}'의 브랜딩이 적용되었습니다. 이제 상품 목록 조회 시 '${distributor.id}'가 필터로 사용됩니다. (FE/BE-CTX-04)`;
                document.getElementById('req-FE-BE-CTX-04').classList.remove('opacity-50');
                await sleep(1000);
                
                frontendEl.classList.remove('active');
                sessionEl.classList.remove('active');
                uiEl.classList.remove('active');

                isSimulating = false;
                simulateBtn.disabled = false;
                urlInput.disabled = false;
            }

            simulateBtn.addEventListener('click', startSimulation);
            resetBtn.addEventListener('click', resetSimulation);
            urlInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    startSimulation();
                }
            });
        });
    </script>
</body>
</html>
